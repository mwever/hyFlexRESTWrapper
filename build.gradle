apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
        	srcDir 'conf'
        	srcDir 'resources'
    	}
    }
	test {
	   	java {
	   		srcDir 'src/test/java'
	   	}
    }
}

//Java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation name: 'chesc'
	implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'

	implementation('org.springframework.boot:spring-boot-starter-web:2.3.8.RELEASE')
	compile 'org.springframework.boot:spring-boot-devtools:2.3.8.RELEASE'
	
	testImplementation 'org.junit.platform:junit-platform-runner:1.7.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
	testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
	testImplementation 'org.awaitility:awaitility:4.0.3'
}

buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE"
    }
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		maven { url "http://clojars.org/repo/" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    mergeServiceFiles()
}

jar {
    manifest {
        attributes(
            'Main-Class': "gecco2020.mlcnp.GeccoExperimenter"
        )
    }
}

task experimenter(type: Jar) {
    manifest {
		attributes 'Main-Class': 'gecco2020.mlcnp.GeccoExperimenter'
    }
    zip64 = true
    baseName = 'GECCO-2020'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

task baselineExperimenter(type: Jar) {
    manifest {
		attributes 'Main-Class': 'gecco2020.mlcnp.baseline.BaselineExperimenter'
    }
    zip64 = true
    baseName = 'BaselineExperimenter'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    with jar
}

configurations {
}

eclipse {
	project.natures "org.eclipse.buildship.core.gradleprojectnature"
}

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
	maven { url "http://clojars.org/repo/" }
	maven { url "https://plugins.gradle.org/m2/" }
	flatDir {
		dirs 'lib'
	}
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}
